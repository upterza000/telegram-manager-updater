{
  "name": "Telegram Video Manager with Streaming Support",
  "nodes": [
    {
      "parameters": {},
      "id": "f6b4c5a0-8c62-4c5a-9f3d-1e2a3b4c5d6e",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "search",
        "queryString": "mimeType contains 'video/' and trashed = false",
        "options": {
          "fields": "id,name,mimeType,size,webViewLink,webContentLink,videoMediaMetadata,createdTime,modifiedTime"
        }
      },
      "id": "a1b2c3d4-5e6f-7g8h-9i0j-k1l2m3n4o5p6",
      "name": "Search Videos in Drive",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "download",
        "fileId": "={{$json.id}}",
        "options": {
          "binaryProperty": "videoData"
        }
      },
      "id": "b2c3d4e5-6f7g-8h9i-0j1k-l2m3n4o5p6q7",
      "name": "Download Video Binary",
      "type": "n8n-nodes-base.googleDrive", 
      "typeVersion": 3,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "command": "ffmpeg -i /tmp/input_video -movflags +faststart -c copy -y /tmp/output_video.mp4",
        "additionalFields": {
          "workingDirectory": "/tmp"
        }
      },
      "id": "c3d4e5f6-7g8h-9i0j-1k2l-m3n4o5p6q7r8",
      "name": "Process Video for Streaming",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "982d4567-e89b-12d3-a456-426614174000",
              "leftValue": "={{ $binary.videoData.fileSize }}",
              "rightValue": 52428800,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "d4e5f6g7-8h9i-0j1k-2l3m-n4o5p6q7r8s9",
      "name": "Check File Size > 50MB",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "sendVideo",
        "chatId": "={{ $json.telegram_chat_id }}",
        "binaryData": true,
        "binaryProperty": "videoData",
        "additionalFields": {
          "caption": "üé• {{ $json.name }}\nüìÅ ‡∏à‡∏≤‡∏Å Google Drive\n‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡∏£‡∏µ‡∏°",
          "supportsStreaming": true,
          "replyMarkup": {
            "inlineKeyboard": [
              [
                {
                  "text": "üì± ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô Telegram",
                  "url": "https://t.me/share/url?url={{ encodeURIComponent($json.webViewLink) }}"
                }
              ],
              [
                {
                  "text": "üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î",
                  "url": "={{ $json.webContentLink }}"
                },
                {
                  "text": "üìÇ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô Drive",
                  "url": "={{ $json.webViewLink }}"
                }
              ]
            ]
          }
        }
      },
      "id": "e5f6g7h8-9i0j-1k2l-3m4n-o5p6q7r8s9t0",
      "name": "Send Large Video to Telegram",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1340,
        200
      ]
    },
    {
      "parameters": {
        "resource": "message", 
        "operation": "sendVideo",
        "chatId": "={{ $json.telegram_chat_id }}",
        "binaryData": true,
        "binaryProperty": "videoData",
        "additionalFields": {
          "caption": "üé• {{ $json.name }}\nüìÅ ‡∏à‡∏≤‡∏Å Google Drive\n‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡∏£‡∏µ‡∏°",
          "supportsStreaming": true,
          "replyMarkup": {
            "inlineKeyboard": [
              [
                {
                  "text": "üì± ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô Telegram", 
                  "url": "https://t.me/share/url?url={{ encodeURIComponent($json.webViewLink) }}"
                }
              ],
              [
                {
                  "text": "üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î",
                  "url": "={{ $json.webContentLink }}"
                },
                {
                  "text": "üìÇ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô Drive", 
                  "url": "={{ $json.webViewLink }}"
                }
              ]
            ]
          }
        }
      },
      "id": "f6g7h8i9-0j1k-2l3m-4n5o-p6q7r8s9t0u1",
      "name": "Send Regular Video to Telegram",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1340,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare video binary data for ffmpeg processing\nconst items = $input.all();\n\nfor (const item of items) {\n  // Write binary data to temp file for ffmpeg processing\n  const fs = require('fs');\n  const path = require('path');\n  \n  if (item.binary && item.binary.videoData) {\n    const inputPath = '/tmp/input_video_' + item.json.id;\n    const outputPath = '/tmp/output_video_' + item.json.id + '.mp4';\n    \n    // Write input file\n    fs.writeFileSync(inputPath, Buffer.from(item.binary.videoData.data, 'base64'));\n    \n    // Store paths for ffmpeg command\n    item.json.inputPath = inputPath;\n    item.json.outputPath = outputPath;\n    \n    // Add telegram chat ID (you should configure this)\n    item.json.telegram_chat_id = process.env.TELEGRAM_CHAT_ID || '@your_channel_id';\n  }\n}\n\nreturn items;"
      },
      "id": "g7h8i9j0-1k2l-3m4n-5o6p-q7r8s9t0u1v2",
      "name": "Prepare Video Processing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        700,
        180
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process video with ffmpeg and read result\nconst items = $input.all();\nconst fs = require('fs');\nconst { execSync } = require('child_process');\n\nfor (const item of items) {\n  if (item.json.inputPath && item.json.outputPath) {\n    try {\n      // Execute ffmpeg command for faststart\n      const command = `ffmpeg -i \"${item.json.inputPath}\" -movflags +faststart -c copy -y \"${item.json.outputPath}\"`;\n      execSync(command);\n      \n      // Read processed video\n      const processedVideo = fs.readFileSync(item.json.outputPath);\n      \n      // Update binary data with processed video\n      item.binary.videoData = {\n        data: processedVideo.toString('base64'),\n        mimeType: 'video/mp4',\n        fileName: item.json.name + '_processed.mp4',\n        fileSize: processedVideo.length\n      };\n      \n      // Cleanup temp files\n      fs.unlinkSync(item.json.inputPath);\n      fs.unlinkSync(item.json.outputPath);\n      \n    } catch (error) {\n      // If ffmpeg fails, use original video\n      console.log('FFmpeg processing failed, using original video:', error.message);\n    }\n  }\n}\n\nreturn items;"
      },
      "id": "h8i9j0k1-2l3m-4n5o-6p7q-r8s9t0u1v2w3",
      "name": "Apply FFmpeg Processing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        920,
        180
      ]
    },
    {
      "parameters": {
        "jsCode": "// Final data preparation for Telegram\nconst items = $input.all();\n\nfor (const item of items) {\n  // Ensure proper video metadata\n  if (item.binary && item.binary.videoData) {\n    // Set proper MIME type for Telegram video\n    item.binary.videoData.mimeType = 'video/mp4';\n    \n    // Ensure filename has .mp4 extension\n    if (!item.binary.videoData.fileName.endsWith('.mp4')) {\n      item.binary.videoData.fileName = item.binary.videoData.fileName.replace(/\\.[^.]+$/, '') + '.mp4';\n    }\n    \n    // Add video metadata for Telegram\n    item.json.video_duration = item.json.videoMediaMetadata?.durationMillis ? \n      Math.floor(item.json.videoMediaMetadata.durationMillis / 1000) : undefined;\n    \n    item.json.video_width = item.json.videoMediaMetadata?.width;\n    item.json.video_height = item.json.videoMediaMetadata?.height;\n    \n    // Format caption with file info\n    const sizeInMB = (item.binary.videoData.fileSize / 1024 / 1024).toFixed(2);\n    item.json.formatted_caption = `üé• ${item.json.name}\\n` +\n      `üìÅ ‡∏à‡∏≤‡∏Å Google Drive\\n` +\n      `üìè ‡∏Ç‡∏ô‡∏≤‡∏î: ${sizeInMB} MB\\n` +\n      `‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡∏£‡∏µ‡∏° (Fast Start)`;\n  }\n}\n\nreturn items;"
      },
      "id": "i9j0k1l2-3m4n-5o6p-7q8r-s9t0u1v2w3x4",
      "name": "Prepare Telegram Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1140,
        180
      ]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Search Videos in Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Videos in Drive": {
      "main": [
        [
          {
            "node": "Download Video Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Video Binary": {
      "main": [
        [
          {
            "node": "Prepare Video Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Video Processing": {
      "main": [
        [
          {
            "node": "Apply FFmpeg Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apply FFmpeg Processing": {
      "main": [
        [
          {
            "node": "Prepare Telegram Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Telegram Data": {
      "main": [
        [
          {
            "node": "Check File Size > 50MB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check File Size > 50MB": {
      "main": [
        [
          {
            "node": "Send Large Video to Telegram",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Regular Video to Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "telegram-video",
      "name": "telegram-video"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}